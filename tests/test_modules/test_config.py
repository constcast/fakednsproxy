import unittest

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from core.config import ConfigParser


class ConfigTester(unittest.TestCase):
    config_dir = os.path.join(os.path.dirname(__file__), '..', 
                              'test_data', 
                              'config_tester_config')

    def generateValidConfigParser(self):
        cp = ConfigParser({})
        cp['dns_server' ] = {'ip': '127.0.0.1', 'port': 53}
        cp['listening_info'] = {'ip': '127.0.0.1', 'port': 53}
        cp['default_dns_policy'] = 'forward'
        return cp

    def test_generated_valid_config_parser(self):
        """
        This test checks if the ConfigParser object generated by 
        self.generateValidConfigParser is actually correct
        """
        cp = self.generateValidConfigParser()
        cp.validate_config()

    def test_config_dns_listener(self):
        """
        Performs various tests on the config files
        """
        init_config = os.path.join(self.config_dir, 'init_test.yaml')
        cp = ConfigParser()
        cp.parse_config(init_config)
        self.assertEqual(cp['dns_server']['ip'], '127.0.0.1')
        self.assertEqual(cp['dns_server']['port'], 53)

    def test_minimal_dns_config(self):
        cp = ConfigParser({})
        with self.assertRaises(RuntimeError):
            cp.validate_config()

    def test_handling_non_existant_key(self):
        cp = ConfigParser({})
        self.assertEqual(False, 'nonexistant' in cp)

    def test_default_value_correct_value(self):
        cp = self.generateValidConfigParser()
        cp['default_dns_policy' ] = 'default_value'
        cp['default_dns_value'] = '127.0.0.1'
        cp.validate_config()

    def test_default_value_missing_value(self):
        cp = self.generateValidConfigParser()
        cp['default_dns_policy' ] = 'default_value'
        with self.assertRaises(RuntimeError):
            cp.validate_config()
